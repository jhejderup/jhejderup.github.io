[{"authors":["Joseph Hejderup","Arie van Deursen","Georgios Gousios"],"categories":null,"content":"","date":1538941930,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538941930,"objectID":"acdcca79a81b40e334180bacca6cd780","permalink":"/publication/icse18-nier-prazi/","publishdate":"2018-10-07T21:52:10+02:00","relpermalink":"/publication/icse18-nier-prazi/","section":"publication","summary":"A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application. ","tags":[],"title":"Software Ecosystem Call Graph for Dependency Management","type":"publication"},{"authors":["Enrique Larios Vargas","Joseph Hejderup","Maria Kechagia","Magiel Bruntink","Georgios Gousios"],"categories":null,"content":"","date":1525722320,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525722320,"objectID":"991941f6f283f8e1b93edb8675703dae","permalink":"/publication/icse18-nier-codefeedr/","publishdate":"2018-05-07T21:45:20+02:00","relpermalink":"/publication/icse18-nier-codefeedr/","section":"publication","summary":"Modern software projects consist of more than just code: teams follow development processes, the code runs on servers or mobile phones and produces run time logs and users talk about the software in forums like StackOverflow and Twitter and rate it on app stores. Insights stemming from the real-time analysis of combined software engineering data can help software practitioners to conduct faster decision-making. With the development of CodeFeedr, a Real-time Software Analytics Platform, we aim to make software analytics a core feedback loop for software engineering projects. CodeFeedrâ€™s vision entails: (1) The ability to unify archival and current software analytics data under a single query language, and (2) The feasibility to apply new techniques and methods for high-level aggregation and summarization of near real-time information on software development. In this paper, we outline three use cases where our platform is expected to have a significant impact on the quality and speed of decision making; dependency management, productivity analytics, and run-time error feedback.","tags":[],"title":"Enabling Real-Time Feedback in Software Engineering","type":"publication"},{"authors":["Joseph Hejderup"],"categories":null,"content":"","date":1431546181,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1431546181,"objectID":"c644f207bf8cab6423d3ccde134a12dd","permalink":"/publication/msc-thesis/","publishdate":"2015-05-13T21:43:01+02:00","relpermalink":"/publication/msc-thesis/","section":"publication","summary":"Web-enabled services hold valuable information that attracts attackers to exploit services for unauthorized access. The transparency of Open-Source projects, shallow screening of hosted projects on public software repositories and access to vulnerability databases pave the way for attackers to gain strategic information to exploit software systems using vulnerable third-party source code. In this thesis, we explore the character of JavaScript modules relying on vulnerable components from a dependency viewpoint. We studied the npm registry, a popular centralized repository for hosting JavaScript modules by using information from security advisories in order to determine: prevalence of modules depending on vulnerable dependencies, the propagation in the dependency chain and the time window to resolve a vulnerable dependency. This was followed by a qualitative study to understand dependency management practices in order to investigate why dependencies remain unchanged. The outcome of this study shows that one-third of the modules using at least one advisory dependency resolve to a vulnerable version. The qualitative study suggested that a majority of the modules lacked awareness or discussion about known vulnerabilities. Furthermore, the key findings indicate that the context use of the module and breaking changes are potential reasons for not resolving the vulnerable dependency.","tags":[],"title":"Msc Thesis","type":"publication"}]